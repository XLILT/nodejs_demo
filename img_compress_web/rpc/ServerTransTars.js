// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0-83.
// **********************************************************************

"use strict;"

var assert     = require('assert');
var TarsStream = require('@tars/stream');


var sunlive = sunlive || {};
module.exports.sunlive = sunlive;

sunlive.DOC_TYPE_WORD = 1;
sunlive.DOC_TYPE_EXCEL = 2;
sunlive.DOC_TYPE_PPT = 3;
sunlive.DOC_TYPE_PDF = 4;
sunlive.DOC_TYPE_TABULA = 5;
sunlive.PAGE_TYPE_PNG = 1;
sunlive.PAGE_TYPE_TABULA = 2;

sunlive.ServerMsgType = {
    SRMT_BEGIN : 0,
    SRMT_UPLOAD_DOCUMENT_NOTIFY : 1,
    SRMT_UPLOAD_NOTIFY : 2,
    SRMT_VIDEO_FINISHED : 3,
    SRMT_IM_CREATE_RESPONSE : 4,
    SRMT_STREAM_STOP : 5,
    SRMT_END : 6
};
sunlive.ServerMsgType._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.ServerMsgType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
sunlive.BroadCastType = {
    BT_BEGIN : 0,
    BT_SINGLE : 1,
    BT_ROOM : 2,
    BT_ALL : 3,
    BT_END : 4
};
sunlive.BroadCastType._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.BroadCastType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

sunlive.UploadNotify = function() {
    this.iDocId = 0;
    this.iPageNum = 0;
    this._classname = "sunlive.UploadNotify";
};
sunlive.UploadNotify._classname = "sunlive.UploadNotify";

sunlive.UploadNotify._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.UploadNotify._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.UploadNotify._readFrom = function (is) {
    var tmp = new sunlive.UploadNotify();
    tmp.iDocId = is.readInt32(1, false, 0);
    tmp.iPageNum = is.readInt32(2, false, 0);
    return tmp;
};
sunlive.UploadNotify.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iDocId);
    os.writeInt32(2, this.iPageNum);
};
sunlive.UploadNotify.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.UploadNotify.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.UploadNotify.prototype.toObject = function() { 
    var tmp = {};

    tmp.iDocId = this.iDocId;
    tmp.iPageNum = this.iPageNum;
    
    return tmp;
}
sunlive.UploadNotify.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iDocId") || (this.iDocId = json.iDocId);
    !json.hasOwnProperty("iPageNum") || (this.iPageNum = json.iPageNum);
}
sunlive.UploadNotify.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.UploadNotify.new = function () {
    return new sunlive.UploadNotify();
}
sunlive.UploadNotify.create = function (is) {
    return sunlive.UploadNotify._readFrom(is);
}
sunlive.ServerMsg = function() {
    this.eBroadcastType = sunlive.BroadCastType.BT_BEGIN;
    this.iRoomId = 0;
    this.lSessionId = 0;
    this.sServant = "";
    this.eType = sunlive.ServerMsgType.SRMT_BEGIN;
    this.bytes = new TarsStream.BinBuffer();
    this._classname = "sunlive.ServerMsg";
};
sunlive.ServerMsg._classname = "sunlive.ServerMsg";

sunlive.ServerMsg._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.ServerMsg._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.ServerMsg._readFrom = function (is) {
    var tmp = new sunlive.ServerMsg();
    tmp.eBroadcastType = is.readInt32(1, false, sunlive.BroadCastType.BT_BEGIN);
    tmp.iRoomId = is.readInt32(2, false, 0);
    tmp.lSessionId = is.readInt64(3, false, 0);
    tmp.sServant = is.readString(4, false, "");
    tmp.eType = is.readInt32(5, false, sunlive.ServerMsgType.SRMT_BEGIN);
    tmp.bytes = is.readBytes(6, false, TarsStream.BinBuffer);
    return tmp;
};
sunlive.ServerMsg.prototype._writeTo = function (os) {
    os.writeInt32(1, this.eBroadcastType);
    os.writeInt32(2, this.iRoomId);
    os.writeInt64(3, this.lSessionId);
    os.writeString(4, this.sServant);
    os.writeInt32(5, this.eType);
    os.writeBytes(6, this.bytes);
};
sunlive.ServerMsg.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.ServerMsg.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.ServerMsg.prototype.toObject = function() { 
    var tmp = {};

    tmp.eBroadcastType = this.eBroadcastType;
    tmp.iRoomId = this.iRoomId;
    tmp.lSessionId = this.lSessionId;
    tmp.sServant = this.sServant;
    tmp.eType = this.eType;
    tmp.bytes = this.bytes.toObject();
    
    return tmp;
}
sunlive.ServerMsg.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("eBroadcastType") || (this.eBroadcastType = json.eBroadcastType);
    !json.hasOwnProperty("iRoomId") || (this.iRoomId = json.iRoomId);
    !json.hasOwnProperty("lSessionId") || (this.lSessionId = json.lSessionId);
    !json.hasOwnProperty("sServant") || (this.sServant = json.sServant);
    !json.hasOwnProperty("eType") || (this.eType = json.eType);
    !json.hasOwnProperty("bytes") || (this.bytes.readFromObject(json.bytes));
}
sunlive.ServerMsg.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.ServerMsg.new = function () {
    return new sunlive.ServerMsg();
}
sunlive.ServerMsg.create = function (is) {
    return sunlive.ServerMsg._readFrom(is);
}


