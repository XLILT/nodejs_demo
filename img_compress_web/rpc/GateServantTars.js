// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0-83.
// **********************************************************************

"use strict;"

var assert     = require('assert');
var TarsStream = require('@tars/stream');
var _TARS_MODULE_A_ = require('./RoomBaseTars.js');


var sunlive = sunlive || {};
module.exports.sunlive = sunlive;

sunlive.GateMsgType = {
    MT_SEND_TO_ROOM : 1,
    MT_SEND_TO_SESSION : 2,
    MT_SESSION_LOGIN_RESPONSE : 3,
    MT_KICK_SESSION : 4
};
sunlive.GateMsgType._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.GateMsgType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
sunlive.MsgPriority = {
    MP_MIN : 0,
    MP_MAX : 10
};
sunlive.MsgPriority._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.MsgPriority._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

sunlive.GateMsgWrapper = function() {
    this.eType = sunlive.GateMsgType.MT_SEND_TO_ROOM;
    this.lSessionId = 0;
    this.iUserId = 0;
    this.iRoomId = 0;
    this.iCode = 0;
    this.sServant = "";
    this.bytes = new TarsStream.BinBuffer();
    this.iPriority = 0;
    this.role = _TARS_MODULE_A_.sunlive.RoleType.RT_BEGIN;
    this._classname = "sunlive.GateMsgWrapper";
};
sunlive.GateMsgWrapper._classname = "sunlive.GateMsgWrapper";

sunlive.GateMsgWrapper._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.GateMsgWrapper._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.GateMsgWrapper._readFrom = function (is) {
    var tmp = new sunlive.GateMsgWrapper();
    tmp.eType = is.readInt32(1, true, sunlive.GateMsgType.MT_SEND_TO_ROOM);
    tmp.lSessionId = is.readInt64(2, false, 0);
    tmp.iUserId = is.readInt32(3, false, 0);
    tmp.iRoomId = is.readInt32(4, false, 0);
    tmp.iCode = is.readInt32(5, false, 0);
    tmp.sServant = is.readString(6, false, "");
    tmp.bytes = is.readBytes(7, false, TarsStream.BinBuffer);
    tmp.iPriority = is.readInt32(8, false, 0);
    tmp.role = is.readInt32(9, false, _TARS_MODULE_A_.sunlive.RoleType.RT_BEGIN);
    return tmp;
};
sunlive.GateMsgWrapper.prototype._writeTo = function (os) {
    os.writeInt32(1, this.eType);
    os.writeInt64(2, this.lSessionId);
    os.writeInt32(3, this.iUserId);
    os.writeInt32(4, this.iRoomId);
    os.writeInt32(5, this.iCode);
    os.writeString(6, this.sServant);
    os.writeBytes(7, this.bytes);
    os.writeInt32(8, this.iPriority);
    os.writeInt32(9, this.role);
};
sunlive.GateMsgWrapper.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.GateMsgWrapper.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.GateMsgWrapper.prototype.toObject = function() { 
    var tmp = {};

    tmp.eType = this.eType;
    tmp.lSessionId = this.lSessionId;
    tmp.iUserId = this.iUserId;
    tmp.iRoomId = this.iRoomId;
    tmp.iCode = this.iCode;
    tmp.sServant = this.sServant;
    tmp.bytes = this.bytes.toObject();
    tmp.iPriority = this.iPriority;
    tmp.role = this.role;
    
    return tmp;
}
sunlive.GateMsgWrapper.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("eType") || (this.eType = json.eType);
    !json.hasOwnProperty("lSessionId") || (this.lSessionId = json.lSessionId);
    !json.hasOwnProperty("iUserId") || (this.iUserId = json.iUserId);
    !json.hasOwnProperty("iRoomId") || (this.iRoomId = json.iRoomId);
    !json.hasOwnProperty("iCode") || (this.iCode = json.iCode);
    !json.hasOwnProperty("sServant") || (this.sServant = json.sServant);
    !json.hasOwnProperty("bytes") || (this.bytes.readFromObject(json.bytes));
    !json.hasOwnProperty("iPriority") || (this.iPriority = json.iPriority);
    !json.hasOwnProperty("role") || (this.role = json.role);
}
sunlive.GateMsgWrapper.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.GateMsgWrapper.new = function () {
    return new sunlive.GateMsgWrapper();
}
sunlive.GateMsgWrapper.create = function (is) {
    return sunlive.GateMsgWrapper._readFrom(is);
}


