// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0-83.
// **********************************************************************

var TarsStream = require('@tars/stream');
var TarsError  = require('@tars/rpc').error;
var _TARS_MODULE_A_ = require('./DocumentBaseTars.js');

var sunlive = sunlive || {};
module.exports.sunlive = sunlive;

sunlive.DocumentProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

sunlive.DocumentProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

sunlive.DocumentProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


sunlive.FET_UNKNOWN = -1;
sunlive.FET_DOC = 1;
sunlive.FET_DOCX = 1;
sunlive.FET_XLS = 2;
sunlive.FET_XLSX = 2;
sunlive.FET_PPT = 3;
sunlive.FET_PPTX = 3;
sunlive.FET_PDF = 4;
sunlive.FET_PNG = 1;
sunlive.FET_JPG = 3;
sunlive.FET_JPEG = 4;
sunlive.KEY_ALIAS_NAME = "key_";
sunlive.KEY_TARGET_NAME = "key";
sunlive.MAX_UPLOAD_EXPIRE_SEC = 2592000;
sunlive.MAX_DOWNLOAD_EXPIRE_SEC = 2592000;

sunlive.FileType = {
    FT_UNKNOWN : -1,
    FT_DOC : 0,
    FT_IMG : 1,
    FT_THUMB : 2,
    FT_FULL_JPG : 3
};
sunlive.FileType._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.FileType._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
sunlive.FileSource = {
    FS_PEKING : 0,
    FS_SFS : 1
};
sunlive.FileSource._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.FileSource._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

sunlive.DownloadMeta = function() {
    this.iSize = 0;
    this.iType = sunlive.FileType.FT_UNKNOWN;
    this.iExtType = 0;
    this.iDocId = 0;
    this.iPageId = 0;
    this.iPageCount = 0;
    this.sUrl = "";
    this.iWidth = 0;
    this.iHeight = 0;
    this.sFileName = "";
    this.lRoomId = 0;
    this.sFileHash = "";
    this.eFileSource = sunlive.FileSource.FS_PEKING;
    this._classname = "sunlive.DownloadMeta";
};
sunlive.DownloadMeta._classname = "sunlive.DownloadMeta";

sunlive.DownloadMeta._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.DownloadMeta._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.DownloadMeta._readFrom = function (is) {
    var tmp = new sunlive.DownloadMeta();
    tmp.iSize = is.readInt32(1, false, 0);
    tmp.iType = is.readInt32(2, false, sunlive.FileType.FT_UNKNOWN);
    tmp.iExtType = is.readInt32(3, false, 0);
    tmp.iDocId = is.readInt32(4, false, 0);
    tmp.iPageId = is.readInt32(5, false, 0);
    tmp.iPageCount = is.readInt32(6, false, 0);
    tmp.sUrl = is.readString(7, false, "");
    tmp.iWidth = is.readInt32(8, false, 0);
    tmp.iHeight = is.readInt32(9, false, 0);
    tmp.sFileName = is.readString(10, false, "");
    tmp.lRoomId = is.readInt64(101, false, 0);
    tmp.sFileHash = is.readString(102, false, "");
    tmp.eFileSource = is.readInt32(103, false, sunlive.FileSource.FS_PEKING);
    return tmp;
};
sunlive.DownloadMeta.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iSize);
    os.writeInt32(2, this.iType);
    os.writeInt32(3, this.iExtType);
    os.writeInt32(4, this.iDocId);
    os.writeInt32(5, this.iPageId);
    os.writeInt32(6, this.iPageCount);
    os.writeString(7, this.sUrl);
    os.writeInt32(8, this.iWidth);
    os.writeInt32(9, this.iHeight);
    os.writeString(10, this.sFileName);
    os.writeInt64(101, this.lRoomId);
    os.writeString(102, this.sFileHash);
    os.writeInt32(103, this.eFileSource);
};
sunlive.DownloadMeta.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.DownloadMeta.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.DownloadMeta.prototype.toObject = function() { 
    var tmp = {};

    tmp.iSize = this.iSize;
    tmp.iType = this.iType;
    tmp.iExtType = this.iExtType;
    tmp.iDocId = this.iDocId;
    tmp.iPageId = this.iPageId;
    tmp.iPageCount = this.iPageCount;
    tmp.sUrl = this.sUrl;
    tmp.iWidth = this.iWidth;
    tmp.iHeight = this.iHeight;
    tmp.sFileName = this.sFileName;
    tmp.lRoomId = this.lRoomId;
    tmp.sFileHash = this.sFileHash;
    tmp.eFileSource = this.eFileSource;
    
    return tmp;
}
sunlive.DownloadMeta.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iSize") || (this.iSize = json.iSize);
    !json.hasOwnProperty("iType") || (this.iType = json.iType);
    !json.hasOwnProperty("iExtType") || (this.iExtType = json.iExtType);
    !json.hasOwnProperty("iDocId") || (this.iDocId = json.iDocId);
    !json.hasOwnProperty("iPageId") || (this.iPageId = json.iPageId);
    !json.hasOwnProperty("iPageCount") || (this.iPageCount = json.iPageCount);
    !json.hasOwnProperty("sUrl") || (this.sUrl = json.sUrl);
    !json.hasOwnProperty("iWidth") || (this.iWidth = json.iWidth);
    !json.hasOwnProperty("iHeight") || (this.iHeight = json.iHeight);
    !json.hasOwnProperty("sFileName") || (this.sFileName = json.sFileName);
    !json.hasOwnProperty("lRoomId") || (this.lRoomId = json.lRoomId);
    !json.hasOwnProperty("sFileHash") || (this.sFileHash = json.sFileHash);
    !json.hasOwnProperty("eFileSource") || (this.eFileSource = json.eFileSource);
}
sunlive.DownloadMeta.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.DownloadMeta.new = function () {
    return new sunlive.DownloadMeta();
}
sunlive.DownloadMeta.create = function (is) {
    return sunlive.DownloadMeta._readFrom(is);
}
sunlive.DownloadRequest = function() {
    this.iDocId = 0;
    this.iPageId = 0;
    this.lRoomId = 0;
    this.lExpireSeconds = 7200;
    this.bReturnAll = false;
    this._classname = "sunlive.DownloadRequest";
};
sunlive.DownloadRequest._classname = "sunlive.DownloadRequest";

sunlive.DownloadRequest._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.DownloadRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.DownloadRequest._readFrom = function (is) {
    var tmp = new sunlive.DownloadRequest();
    tmp.iDocId = is.readInt32(1, false, 0);
    tmp.iPageId = is.readInt32(2, false, 0);
    tmp.lRoomId = is.readInt64(3, false, 0);
    tmp.lExpireSeconds = is.readInt64(4, false, 7200);
    tmp.bReturnAll = is.readBoolean(5, false, false);
    return tmp;
};
sunlive.DownloadRequest.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iDocId);
    os.writeInt32(2, this.iPageId);
    os.writeInt64(3, this.lRoomId);
    os.writeInt64(4, this.lExpireSeconds);
    os.writeBoolean(5, this.bReturnAll);
};
sunlive.DownloadRequest.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.DownloadRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.DownloadRequest.prototype.toObject = function() { 
    var tmp = {};

    tmp.iDocId = this.iDocId;
    tmp.iPageId = this.iPageId;
    tmp.lRoomId = this.lRoomId;
    tmp.lExpireSeconds = this.lExpireSeconds;
    tmp.bReturnAll = this.bReturnAll;
    
    return tmp;
}
sunlive.DownloadRequest.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iDocId") || (this.iDocId = json.iDocId);
    !json.hasOwnProperty("iPageId") || (this.iPageId = json.iPageId);
    !json.hasOwnProperty("lRoomId") || (this.lRoomId = json.lRoomId);
    !json.hasOwnProperty("lExpireSeconds") || (this.lExpireSeconds = json.lExpireSeconds);
    !json.hasOwnProperty("bReturnAll") || (this.bReturnAll = json.bReturnAll);
}
sunlive.DownloadRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.DownloadRequest.new = function () {
    return new sunlive.DownloadRequest();
}
sunlive.DownloadRequest.create = function (is) {
    return sunlive.DownloadRequest._readFrom(is);
}
sunlive.DownloadResponse = function() {
    this.vFiles = new TarsStream.List(sunlive.DownloadMeta);
    this._classname = "sunlive.DownloadResponse";
};
sunlive.DownloadResponse._classname = "sunlive.DownloadResponse";

sunlive.DownloadResponse._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.DownloadResponse._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.DownloadResponse._readFrom = function (is) {
    var tmp = new sunlive.DownloadResponse();
    tmp.vFiles = is.readList(1, false, TarsStream.List(sunlive.DownloadMeta));
    return tmp;
};
sunlive.DownloadResponse.prototype._writeTo = function (os) {
    os.writeList(1, this.vFiles);
};
sunlive.DownloadResponse.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.DownloadResponse.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.DownloadResponse.prototype.toObject = function() { 
    var tmp = {};

    tmp.vFiles = this.vFiles.toObject();
    
    return tmp;
}
sunlive.DownloadResponse.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("vFiles") || (this.vFiles.readFromObject(json.vFiles));
}
sunlive.DownloadResponse.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.DownloadResponse.new = function () {
    return new sunlive.DownloadResponse();
}
sunlive.DownloadResponse.create = function (is) {
    return sunlive.DownloadResponse._readFrom(is);
}
sunlive.DeleteRequest = function() {
    this.iDocId = 0;
    this.lRoomId = 0;
    this.bDeleteAll = false;
    this._classname = "sunlive.DeleteRequest";
};
sunlive.DeleteRequest._classname = "sunlive.DeleteRequest";

sunlive.DeleteRequest._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.DeleteRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.DeleteRequest._readFrom = function (is) {
    var tmp = new sunlive.DeleteRequest();
    tmp.iDocId = is.readInt32(1, false, 0);
    tmp.lRoomId = is.readInt64(2, false, 0);
    tmp.bDeleteAll = is.readBoolean(3, false, false);
    return tmp;
};
sunlive.DeleteRequest.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iDocId);
    os.writeInt64(2, this.lRoomId);
    os.writeBoolean(3, this.bDeleteAll);
};
sunlive.DeleteRequest.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.DeleteRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.DeleteRequest.prototype.toObject = function() { 
    var tmp = {};

    tmp.iDocId = this.iDocId;
    tmp.lRoomId = this.lRoomId;
    tmp.bDeleteAll = this.bDeleteAll;
    
    return tmp;
}
sunlive.DeleteRequest.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iDocId") || (this.iDocId = json.iDocId);
    !json.hasOwnProperty("lRoomId") || (this.lRoomId = json.lRoomId);
    !json.hasOwnProperty("bDeleteAll") || (this.bDeleteAll = json.bDeleteAll);
}
sunlive.DeleteRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.DeleteRequest.new = function () {
    return new sunlive.DeleteRequest();
}
sunlive.DeleteRequest.create = function (is) {
    return sunlive.DeleteRequest._readFrom(is);
}
sunlive.CleanRequest = function() {
    this.lRoomId = 0;
    this._classname = "sunlive.CleanRequest";
};
sunlive.CleanRequest._classname = "sunlive.CleanRequest";

sunlive.CleanRequest._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.CleanRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.CleanRequest._readFrom = function (is) {
    var tmp = new sunlive.CleanRequest();
    tmp.lRoomId = is.readInt64(1, false, 0);
    return tmp;
};
sunlive.CleanRequest.prototype._writeTo = function (os) {
    os.writeInt64(1, this.lRoomId);
};
sunlive.CleanRequest.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.CleanRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.CleanRequest.prototype.toObject = function() { 
    var tmp = {};

    tmp.lRoomId = this.lRoomId;
    
    return tmp;
}
sunlive.CleanRequest.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("lRoomId") || (this.lRoomId = json.lRoomId);
}
sunlive.CleanRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.CleanRequest.new = function () {
    return new sunlive.CleanRequest();
}
sunlive.CleanRequest.create = function (is) {
    return sunlive.CleanRequest._readFrom(is);
}
sunlive.UploadCallbackExtra = function() {
    this.fileUrl = "";
    this.imageWidth = 0;
    this.imageHeight = 0;
    this.thumbnailKey = new TarsStream.List(TarsStream.String);
    this.thumbnailHash = new TarsStream.List(TarsStream.String);
    this.thumbnailSize = new TarsStream.List(TarsStream.Int64);
    this.thumbnailUrl = new TarsStream.List(TarsStream.String);
    this.thumbnailWidth = new TarsStream.List(TarsStream.Int32);
    this.thumbnailHeight = new TarsStream.List(TarsStream.Int32);
    this._classname = "sunlive.UploadCallbackExtra";
};
sunlive.UploadCallbackExtra._classname = "sunlive.UploadCallbackExtra";

sunlive.UploadCallbackExtra._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.UploadCallbackExtra._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.UploadCallbackExtra._readFrom = function (is) {
    var tmp = new sunlive.UploadCallbackExtra();
    tmp.fileUrl = is.readString(1, false, "");
    tmp.imageWidth = is.readInt32(2, false, 0);
    tmp.imageHeight = is.readInt32(3, false, 0);
    tmp.thumbnailKey = is.readList(4, false, TarsStream.List(TarsStream.String));
    tmp.thumbnailHash = is.readList(5, false, TarsStream.List(TarsStream.String));
    tmp.thumbnailSize = is.readList(6, false, TarsStream.List(TarsStream.Int64));
    tmp.thumbnailUrl = is.readList(7, false, TarsStream.List(TarsStream.String));
    tmp.thumbnailWidth = is.readList(8, false, TarsStream.List(TarsStream.Int32));
    tmp.thumbnailHeight = is.readList(9, false, TarsStream.List(TarsStream.Int32));
    return tmp;
};
sunlive.UploadCallbackExtra.prototype._writeTo = function (os) {
    os.writeString(1, this.fileUrl);
    os.writeInt32(2, this.imageWidth);
    os.writeInt32(3, this.imageHeight);
    os.writeList(4, this.thumbnailKey);
    os.writeList(5, this.thumbnailHash);
    os.writeList(6, this.thumbnailSize);
    os.writeList(7, this.thumbnailUrl);
    os.writeList(8, this.thumbnailWidth);
    os.writeList(9, this.thumbnailHeight);
};
sunlive.UploadCallbackExtra.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.UploadCallbackExtra.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.UploadCallbackExtra.prototype.toObject = function() { 
    var tmp = {};

    tmp.fileUrl = this.fileUrl;
    tmp.imageWidth = this.imageWidth;
    tmp.imageHeight = this.imageHeight;
    tmp.thumbnailKey = this.thumbnailKey.toObject();
    tmp.thumbnailHash = this.thumbnailHash.toObject();
    tmp.thumbnailSize = this.thumbnailSize.toObject();
    tmp.thumbnailUrl = this.thumbnailUrl.toObject();
    tmp.thumbnailWidth = this.thumbnailWidth.toObject();
    tmp.thumbnailHeight = this.thumbnailHeight.toObject();
    
    return tmp;
}
sunlive.UploadCallbackExtra.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("fileUrl") || (this.fileUrl = json.fileUrl);
    !json.hasOwnProperty("imageWidth") || (this.imageWidth = json.imageWidth);
    !json.hasOwnProperty("imageHeight") || (this.imageHeight = json.imageHeight);
    !json.hasOwnProperty("thumbnailKey") || (this.thumbnailKey.readFromObject(json.thumbnailKey));
    !json.hasOwnProperty("thumbnailHash") || (this.thumbnailHash.readFromObject(json.thumbnailHash));
    !json.hasOwnProperty("thumbnailSize") || (this.thumbnailSize.readFromObject(json.thumbnailSize));
    !json.hasOwnProperty("thumbnailUrl") || (this.thumbnailUrl.readFromObject(json.thumbnailUrl));
    !json.hasOwnProperty("thumbnailWidth") || (this.thumbnailWidth.readFromObject(json.thumbnailWidth));
    !json.hasOwnProperty("thumbnailHeight") || (this.thumbnailHeight.readFromObject(json.thumbnailHeight));
}
sunlive.UploadCallbackExtra.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.UploadCallbackExtra.new = function () {
    return new sunlive.UploadCallbackExtra();
}
sunlive.UploadCallbackExtra.create = function (is) {
    return sunlive.UploadCallbackExtra._readFrom(is);
}
sunlive.UploadCallbackRequest = function() {
    this.key_ = "";
    this.lastModifyDate = 0;
    this.contentLength = 0;
    this.contentType = "";
    this.requestFromCosId = "";
    this.requestSourceIP = "";
    this.specialParamResult = "";
    this._classname = "sunlive.UploadCallbackRequest";
};
sunlive.UploadCallbackRequest._classname = "sunlive.UploadCallbackRequest";

sunlive.UploadCallbackRequest._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.UploadCallbackRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.UploadCallbackRequest._readFrom = function (is) {
    var tmp = new sunlive.UploadCallbackRequest();
    tmp.key_ = is.readString(1, false, "");
    tmp.lastModifyDate = is.readInt64(2, false, 0);
    tmp.contentLength = is.readInt64(3, false, 0);
    tmp.contentType = is.readString(4, false, "");
    tmp.requestFromCosId = is.readString(5, false, "");
    tmp.requestSourceIP = is.readString(6, false, "");
    tmp.specialParamResult = is.readString(7, false, "");
    return tmp;
};
sunlive.UploadCallbackRequest.prototype._writeTo = function (os) {
    os.writeString(1, this.key_);
    os.writeInt64(2, this.lastModifyDate);
    os.writeInt64(3, this.contentLength);
    os.writeString(4, this.contentType);
    os.writeString(5, this.requestFromCosId);
    os.writeString(6, this.requestSourceIP);
    os.writeString(7, this.specialParamResult);
};
sunlive.UploadCallbackRequest.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.UploadCallbackRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.UploadCallbackRequest.prototype.toObject = function() { 
    var tmp = {};

    tmp.key_ = this.key_;
    tmp.lastModifyDate = this.lastModifyDate;
    tmp.contentLength = this.contentLength;
    tmp.contentType = this.contentType;
    tmp.requestFromCosId = this.requestFromCosId;
    tmp.requestSourceIP = this.requestSourceIP;
    tmp.specialParamResult = this.specialParamResult;
    
    return tmp;
}
sunlive.UploadCallbackRequest.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("key_") || (this.key_ = json.key_);
    !json.hasOwnProperty("lastModifyDate") || (this.lastModifyDate = json.lastModifyDate);
    !json.hasOwnProperty("contentLength") || (this.contentLength = json.contentLength);
    !json.hasOwnProperty("contentType") || (this.contentType = json.contentType);
    !json.hasOwnProperty("requestFromCosId") || (this.requestFromCosId = json.requestFromCosId);
    !json.hasOwnProperty("requestSourceIP") || (this.requestSourceIP = json.requestSourceIP);
    !json.hasOwnProperty("specialParamResult") || (this.specialParamResult = json.specialParamResult);
}
sunlive.UploadCallbackRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.UploadCallbackRequest.new = function () {
    return new sunlive.UploadCallbackRequest();
}
sunlive.UploadCallbackRequest.create = function (is) {
    return sunlive.UploadCallbackRequest._readFrom(is);
}
sunlive.Pages = function() {
    this.mPageKeys = new TarsStream.Map(TarsStream.Int32, TarsStream.Int64);
    this.mThumbnailPagesKeys = new TarsStream.Map(TarsStream.Int32, TarsStream.Int64);
    this.mRawJpgKeys = new TarsStream.Map(TarsStream.Int32, TarsStream.Int64);
    this._classname = "sunlive.Pages";
};
sunlive.Pages._classname = "sunlive.Pages";

sunlive.Pages._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.Pages._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.Pages._readFrom = function (is) {
    var tmp = new sunlive.Pages();
    tmp.mPageKeys = is.readMap(1, false, TarsStream.Map(TarsStream.Int32, TarsStream.Int64));
    tmp.mThumbnailPagesKeys = is.readMap(2, false, TarsStream.Map(TarsStream.Int32, TarsStream.Int64));
    tmp.mRawJpgKeys = is.readMap(3, false, TarsStream.Map(TarsStream.Int32, TarsStream.Int64));
    return tmp;
};
sunlive.Pages.prototype._writeTo = function (os) {
    os.writeMap(1, this.mPageKeys);
    os.writeMap(2, this.mThumbnailPagesKeys);
    os.writeMap(3, this.mRawJpgKeys);
};
sunlive.Pages.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.Pages.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.Pages.prototype.toObject = function() { 
    var tmp = {};

    tmp.mPageKeys = this.mPageKeys.toObject();
    tmp.mThumbnailPagesKeys = this.mThumbnailPagesKeys.toObject();
    tmp.mRawJpgKeys = this.mRawJpgKeys.toObject();
    
    return tmp;
}
sunlive.Pages.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("mPageKeys") || (this.mPageKeys.readFromObject(json.mPageKeys));
    !json.hasOwnProperty("mThumbnailPagesKeys") || (this.mThumbnailPagesKeys.readFromObject(json.mThumbnailPagesKeys));
    !json.hasOwnProperty("mRawJpgKeys") || (this.mRawJpgKeys.readFromObject(json.mRawJpgKeys));
}
sunlive.Pages.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.Pages.new = function () {
    return new sunlive.Pages();
}
sunlive.Pages.create = function (is) {
    return sunlive.Pages._readFrom(is);
}
sunlive.DocPages = function() {
    this.lDbId = 0;
    this.pages = new sunlive.Pages();
    this._classname = "sunlive.DocPages";
};
sunlive.DocPages._classname = "sunlive.DocPages";

sunlive.DocPages._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.DocPages._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.DocPages._readFrom = function (is) {
    var tmp = new sunlive.DocPages();
    tmp.lDbId = is.readInt64(1, false, 0);
    tmp.pages = is.readStruct(2, false, sunlive.Pages);
    return tmp;
};
sunlive.DocPages.prototype._writeTo = function (os) {
    os.writeInt64(1, this.lDbId);
    os.writeStruct(2, this.pages);
};
sunlive.DocPages.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.DocPages.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.DocPages.prototype.toObject = function() { 
    var tmp = {};

    tmp.lDbId = this.lDbId;
    tmp.pages = this.pages.toObject();
    
    return tmp;
}
sunlive.DocPages.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("lDbId") || (this.lDbId = json.lDbId);
    !json.hasOwnProperty("pages") || (this.pages.readFromObject(json.pages));
}
sunlive.DocPages.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.DocPages.new = function () {
    return new sunlive.DocPages();
}
sunlive.DocPages.create = function (is) {
    return sunlive.DocPages._readFrom(is);
}
sunlive.SFSGetTokenReq = function() {
    this.accessKey = "";
    this.secretKey = "";
    this.timeout = 0;
    this._classname = "sunlive.SFSGetTokenReq";
};
sunlive.SFSGetTokenReq._classname = "sunlive.SFSGetTokenReq";

sunlive.SFSGetTokenReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSGetTokenReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSGetTokenReq._readFrom = function (is) {
    var tmp = new sunlive.SFSGetTokenReq();
    tmp.accessKey = is.readString(1, false, "");
    tmp.secretKey = is.readString(2, false, "");
    tmp.timeout = is.readUInt32(3, false, 0);
    return tmp;
};
sunlive.SFSGetTokenReq.prototype._writeTo = function (os) {
    os.writeString(1, this.accessKey);
    os.writeString(2, this.secretKey);
    os.writeUInt32(3, this.timeout);
};
sunlive.SFSGetTokenReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSGetTokenReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSGetTokenReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.accessKey = this.accessKey;
    tmp.secretKey = this.secretKey;
    tmp.timeout = this.timeout;
    
    return tmp;
}
sunlive.SFSGetTokenReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("accessKey") || (this.accessKey = json.accessKey);
    !json.hasOwnProperty("secretKey") || (this.secretKey = json.secretKey);
    !json.hasOwnProperty("timeout") || (this.timeout = json.timeout);
}
sunlive.SFSGetTokenReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSGetTokenReq.new = function () {
    return new sunlive.SFSGetTokenReq();
}
sunlive.SFSGetTokenReq.create = function (is) {
    return sunlive.SFSGetTokenReq._readFrom(is);
}
sunlive.SFSGetTokenData = function() {
    this.accessToken = "";
    this.appid = "";
    this.expiredTime = 0;
    this._classname = "sunlive.SFSGetTokenData";
};
sunlive.SFSGetTokenData._classname = "sunlive.SFSGetTokenData";

sunlive.SFSGetTokenData._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSGetTokenData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSGetTokenData._readFrom = function (is) {
    var tmp = new sunlive.SFSGetTokenData();
    tmp.accessToken = is.readString(1, false, "");
    tmp.appid = is.readString(2, false, "");
    tmp.expiredTime = is.readUInt32(3, false, 0);
    return tmp;
};
sunlive.SFSGetTokenData.prototype._writeTo = function (os) {
    os.writeString(1, this.accessToken);
    os.writeString(2, this.appid);
    os.writeUInt32(3, this.expiredTime);
};
sunlive.SFSGetTokenData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSGetTokenData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSGetTokenData.prototype.toObject = function() { 
    var tmp = {};

    tmp.accessToken = this.accessToken;
    tmp.appid = this.appid;
    tmp.expiredTime = this.expiredTime;
    
    return tmp;
}
sunlive.SFSGetTokenData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("accessToken") || (this.accessToken = json.accessToken);
    !json.hasOwnProperty("appid") || (this.appid = json.appid);
    !json.hasOwnProperty("expiredTime") || (this.expiredTime = json.expiredTime);
}
sunlive.SFSGetTokenData.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSGetTokenData.new = function () {
    return new sunlive.SFSGetTokenData();
}
sunlive.SFSGetTokenData.create = function (is) {
    return sunlive.SFSGetTokenData._readFrom(is);
}
sunlive.SFSGetTokenRes = function() {
    this.code = "";
    this.msg = "";
    this.data = new sunlive.SFSGetTokenData();
    this._classname = "sunlive.SFSGetTokenRes";
};
sunlive.SFSGetTokenRes._classname = "sunlive.SFSGetTokenRes";

sunlive.SFSGetTokenRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSGetTokenRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSGetTokenRes._readFrom = function (is) {
    var tmp = new sunlive.SFSGetTokenRes();
    tmp.code = is.readString(1, false, "");
    tmp.msg = is.readString(2, false, "");
    tmp.data = is.readStruct(3, false, sunlive.SFSGetTokenData);
    return tmp;
};
sunlive.SFSGetTokenRes.prototype._writeTo = function (os) {
    os.writeString(1, this.code);
    os.writeString(2, this.msg);
    os.writeStruct(3, this.data);
};
sunlive.SFSGetTokenRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSGetTokenRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSGetTokenRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.code = this.code;
    tmp.msg = this.msg;
    tmp.data = this.data.toObject();
    
    return tmp;
}
sunlive.SFSGetTokenRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("msg") || (this.msg = json.msg);
    !json.hasOwnProperty("data") || (this.data.readFromObject(json.data));
}
sunlive.SFSGetTokenRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSGetTokenRes.new = function () {
    return new sunlive.SFSGetTokenRes();
}
sunlive.SFSGetTokenRes.create = function (is) {
    return sunlive.SFSGetTokenRes._readFrom(is);
}
sunlive.SFSUploadReq = function() {
    this.key_ = "";
    this.authTimeout = 0;
    this.downloadAuthTimeout = 0;
    this.thumbnailWidth = new TarsStream.List(TarsStream.Int32);
    this.thumbnailHeight = new TarsStream.List(TarsStream.Int32);
    this.thumbnailSuffix = new TarsStream.List(TarsStream.String);
    this._classname = "sunlive.SFSUploadReq";
};
sunlive.SFSUploadReq._classname = "sunlive.SFSUploadReq";

sunlive.SFSUploadReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSUploadReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSUploadReq._readFrom = function (is) {
    var tmp = new sunlive.SFSUploadReq();
    tmp.key_ = is.readString(1, false, "");
    tmp.authTimeout = is.readUInt32(2, false, 0);
    tmp.downloadAuthTimeout = is.readUInt32(3, false, 0);
    tmp.thumbnailWidth = is.readList(4, false, TarsStream.List(TarsStream.Int32));
    tmp.thumbnailHeight = is.readList(5, false, TarsStream.List(TarsStream.Int32));
    tmp.thumbnailSuffix = is.readList(6, false, TarsStream.List(TarsStream.String));
    return tmp;
};
sunlive.SFSUploadReq.prototype._writeTo = function (os) {
    os.writeString(1, this.key_);
    os.writeUInt32(2, this.authTimeout);
    os.writeUInt32(3, this.downloadAuthTimeout);
    os.writeList(4, this.thumbnailWidth);
    os.writeList(5, this.thumbnailHeight);
    os.writeList(6, this.thumbnailSuffix);
};
sunlive.SFSUploadReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSUploadReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSUploadReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.key_ = this.key_;
    tmp.authTimeout = this.authTimeout;
    tmp.downloadAuthTimeout = this.downloadAuthTimeout;
    tmp.thumbnailWidth = this.thumbnailWidth.toObject();
    tmp.thumbnailHeight = this.thumbnailHeight.toObject();
    tmp.thumbnailSuffix = this.thumbnailSuffix.toObject();
    
    return tmp;
}
sunlive.SFSUploadReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("key_") || (this.key_ = json.key_);
    !json.hasOwnProperty("authTimeout") || (this.authTimeout = json.authTimeout);
    !json.hasOwnProperty("downloadAuthTimeout") || (this.downloadAuthTimeout = json.downloadAuthTimeout);
    !json.hasOwnProperty("thumbnailWidth") || (this.thumbnailWidth.readFromObject(json.thumbnailWidth));
    !json.hasOwnProperty("thumbnailHeight") || (this.thumbnailHeight.readFromObject(json.thumbnailHeight));
    !json.hasOwnProperty("thumbnailSuffix") || (this.thumbnailSuffix.readFromObject(json.thumbnailSuffix));
}
sunlive.SFSUploadReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSUploadReq.new = function () {
    return new sunlive.SFSUploadReq();
}
sunlive.SFSUploadReq.create = function (is) {
    return sunlive.SFSUploadReq._readFrom(is);
}
sunlive.SFSUploadData = function() {
    this.uploadUrl = "";
    this.header = new TarsStream.Map(TarsStream.String, TarsStream.String);
    this._classname = "sunlive.SFSUploadData";
};
sunlive.SFSUploadData._classname = "sunlive.SFSUploadData";

sunlive.SFSUploadData._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSUploadData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSUploadData._readFrom = function (is) {
    var tmp = new sunlive.SFSUploadData();
    tmp.uploadUrl = is.readString(1, false, "");
    tmp.header = is.readMap(2, false, TarsStream.Map(TarsStream.String, TarsStream.String));
    return tmp;
};
sunlive.SFSUploadData.prototype._writeTo = function (os) {
    os.writeString(1, this.uploadUrl);
    os.writeMap(2, this.header);
};
sunlive.SFSUploadData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSUploadData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSUploadData.prototype.toObject = function() { 
    var tmp = {};

    tmp.uploadUrl = this.uploadUrl;
    tmp.header = this.header.toObject();
    
    return tmp;
}
sunlive.SFSUploadData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("uploadUrl") || (this.uploadUrl = json.uploadUrl);
    !json.hasOwnProperty("header") || (this.header.readFromObject(json.header));
}
sunlive.SFSUploadData.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSUploadData.new = function () {
    return new sunlive.SFSUploadData();
}
sunlive.SFSUploadData.create = function (is) {
    return sunlive.SFSUploadData._readFrom(is);
}
sunlive.SFSUploadRes = function() {
    this.code = "";
    this.msg = "";
    this.data = new sunlive.SFSUploadData();
    this._classname = "sunlive.SFSUploadRes";
};
sunlive.SFSUploadRes._classname = "sunlive.SFSUploadRes";

sunlive.SFSUploadRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSUploadRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSUploadRes._readFrom = function (is) {
    var tmp = new sunlive.SFSUploadRes();
    tmp.code = is.readString(1, false, "");
    tmp.msg = is.readString(2, false, "");
    tmp.data = is.readStruct(3, false, sunlive.SFSUploadData);
    return tmp;
};
sunlive.SFSUploadRes.prototype._writeTo = function (os) {
    os.writeString(1, this.code);
    os.writeString(2, this.msg);
    os.writeStruct(3, this.data);
};
sunlive.SFSUploadRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSUploadRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSUploadRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.code = this.code;
    tmp.msg = this.msg;
    tmp.data = this.data.toObject();
    
    return tmp;
}
sunlive.SFSUploadRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("msg") || (this.msg = json.msg);
    !json.hasOwnProperty("data") || (this.data.readFromObject(json.data));
}
sunlive.SFSUploadRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSUploadRes.new = function () {
    return new sunlive.SFSUploadRes();
}
sunlive.SFSUploadRes.create = function (is) {
    return sunlive.SFSUploadRes._readFrom(is);
}
sunlive.SFSDownloadReq = function() {
    this.key_ = "";
    this.authTimeout = 0;
    this._classname = "sunlive.SFSDownloadReq";
};
sunlive.SFSDownloadReq._classname = "sunlive.SFSDownloadReq";

sunlive.SFSDownloadReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSDownloadReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSDownloadReq._readFrom = function (is) {
    var tmp = new sunlive.SFSDownloadReq();
    tmp.key_ = is.readString(1, false, "");
    tmp.authTimeout = is.readUInt32(2, false, 0);
    return tmp;
};
sunlive.SFSDownloadReq.prototype._writeTo = function (os) {
    os.writeString(1, this.key_);
    os.writeUInt32(2, this.authTimeout);
};
sunlive.SFSDownloadReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSDownloadReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSDownloadReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.key_ = this.key_;
    tmp.authTimeout = this.authTimeout;
    
    return tmp;
}
sunlive.SFSDownloadReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("key_") || (this.key_ = json.key_);
    !json.hasOwnProperty("authTimeout") || (this.authTimeout = json.authTimeout);
}
sunlive.SFSDownloadReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSDownloadReq.new = function () {
    return new sunlive.SFSDownloadReq();
}
sunlive.SFSDownloadReq.create = function (is) {
    return sunlive.SFSDownloadReq._readFrom(is);
}
sunlive.SFSDownloadData = function() {
    this.downloadUrl = "";
    this._classname = "sunlive.SFSDownloadData";
};
sunlive.SFSDownloadData._classname = "sunlive.SFSDownloadData";

sunlive.SFSDownloadData._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSDownloadData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSDownloadData._readFrom = function (is) {
    var tmp = new sunlive.SFSDownloadData();
    tmp.downloadUrl = is.readString(1, false, "");
    return tmp;
};
sunlive.SFSDownloadData.prototype._writeTo = function (os) {
    os.writeString(1, this.downloadUrl);
};
sunlive.SFSDownloadData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSDownloadData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSDownloadData.prototype.toObject = function() { 
    var tmp = {};

    tmp.downloadUrl = this.downloadUrl;
    
    return tmp;
}
sunlive.SFSDownloadData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("downloadUrl") || (this.downloadUrl = json.downloadUrl);
}
sunlive.SFSDownloadData.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSDownloadData.new = function () {
    return new sunlive.SFSDownloadData();
}
sunlive.SFSDownloadData.create = function (is) {
    return sunlive.SFSDownloadData._readFrom(is);
}
sunlive.SFSDownloadRes = function() {
    this.code = "";
    this.msg = "";
    this.data = new sunlive.SFSDownloadData();
    this._classname = "sunlive.SFSDownloadRes";
};
sunlive.SFSDownloadRes._classname = "sunlive.SFSDownloadRes";

sunlive.SFSDownloadRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSDownloadRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSDownloadRes._readFrom = function (is) {
    var tmp = new sunlive.SFSDownloadRes();
    tmp.code = is.readString(1, false, "");
    tmp.msg = is.readString(2, false, "");
    tmp.data = is.readStruct(3, false, sunlive.SFSDownloadData);
    return tmp;
};
sunlive.SFSDownloadRes.prototype._writeTo = function (os) {
    os.writeString(1, this.code);
    os.writeString(2, this.msg);
    os.writeStruct(3, this.data);
};
sunlive.SFSDownloadRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSDownloadRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSDownloadRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.code = this.code;
    tmp.msg = this.msg;
    tmp.data = this.data.toObject();
    
    return tmp;
}
sunlive.SFSDownloadRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("msg") || (this.msg = json.msg);
    !json.hasOwnProperty("data") || (this.data.readFromObject(json.data));
}
sunlive.SFSDownloadRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSDownloadRes.new = function () {
    return new sunlive.SFSDownloadRes();
}
sunlive.SFSDownloadRes.create = function (is) {
    return sunlive.SFSDownloadRes._readFrom(is);
}
sunlive.SFSDownloadBatchReq = function() {
    this.key_ = new TarsStream.List(TarsStream.String);
    this.authTimeout = 0;
    this._classname = "sunlive.SFSDownloadBatchReq";
};
sunlive.SFSDownloadBatchReq._classname = "sunlive.SFSDownloadBatchReq";

sunlive.SFSDownloadBatchReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSDownloadBatchReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSDownloadBatchReq._readFrom = function (is) {
    var tmp = new sunlive.SFSDownloadBatchReq();
    tmp.key_ = is.readList(1, false, TarsStream.List(TarsStream.String));
    tmp.authTimeout = is.readUInt32(2, false, 0);
    return tmp;
};
sunlive.SFSDownloadBatchReq.prototype._writeTo = function (os) {
    os.writeList(1, this.key_);
    os.writeUInt32(2, this.authTimeout);
};
sunlive.SFSDownloadBatchReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSDownloadBatchReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSDownloadBatchReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.key_ = this.key_.toObject();
    tmp.authTimeout = this.authTimeout;
    
    return tmp;
}
sunlive.SFSDownloadBatchReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("key_") || (this.key_.readFromObject(json.key_));
    !json.hasOwnProperty("authTimeout") || (this.authTimeout = json.authTimeout);
}
sunlive.SFSDownloadBatchReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSDownloadBatchReq.new = function () {
    return new sunlive.SFSDownloadBatchReq();
}
sunlive.SFSDownloadBatchReq.create = function (is) {
    return sunlive.SFSDownloadBatchReq._readFrom(is);
}
sunlive.SFSDownloadBatchRes = function() {
    this.code = "";
    this.msg = "";
    this.data = new TarsStream.List(TarsStream.String);
    this._classname = "sunlive.SFSDownloadBatchRes";
};
sunlive.SFSDownloadBatchRes._classname = "sunlive.SFSDownloadBatchRes";

sunlive.SFSDownloadBatchRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SFSDownloadBatchRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SFSDownloadBatchRes._readFrom = function (is) {
    var tmp = new sunlive.SFSDownloadBatchRes();
    tmp.code = is.readString(1, false, "");
    tmp.msg = is.readString(2, false, "");
    tmp.data = is.readList(3, false, TarsStream.List(TarsStream.String));
    return tmp;
};
sunlive.SFSDownloadBatchRes.prototype._writeTo = function (os) {
    os.writeString(1, this.code);
    os.writeString(2, this.msg);
    os.writeList(3, this.data);
};
sunlive.SFSDownloadBatchRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SFSDownloadBatchRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SFSDownloadBatchRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.code = this.code;
    tmp.msg = this.msg;
    tmp.data = this.data.toObject();
    
    return tmp;
}
sunlive.SFSDownloadBatchRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("msg") || (this.msg = json.msg);
    !json.hasOwnProperty("data") || (this.data.readFromObject(json.data));
}
sunlive.SFSDownloadBatchRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SFSDownloadBatchRes.new = function () {
    return new sunlive.SFSDownloadBatchRes();
}
sunlive.SFSDownloadBatchRes.create = function (is) {
    return sunlive.SFSDownloadBatchRes._readFrom(is);
}

sunlive.DocumentProxy.prototype.clean = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('clean', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.DocumentProxy.prototype.deleteFile = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('deleteFile', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.DocumentProxy.prototype.download = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.response = is.readStruct(2, true, sunlive.DownloadResponse);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('download', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.DocumentProxy.prototype.getUploadToken = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);
            response.arguments.response = is.readStruct(2, true, _TARS_MODULE_A_.sunlive.TokenResponse);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('getUploadToken', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.DocumentProxy.prototype.uploadCallback = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('uploadCallback', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



