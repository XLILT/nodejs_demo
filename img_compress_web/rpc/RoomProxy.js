// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0-83.
// **********************************************************************

var TarsStream = require('@tars/stream');
var TarsError  = require('@tars/rpc').error;
var _TARS_MODULE_C_ = require('./DocumentBaseTars.js');
var _TARS_MODULE_E_ = require('./GateServantTars.js');
var _TARS_MODULE_D_ = require('./RoomBaseTars.js');
var _TARS_MODULE_B_ = require('./RoomClientTars.js');
var _TARS_MODULE_F_ = require('./ServerTransTars.js');
var _TARS_MODULE_A_ = require('./VideoClientTars.js');

var sunlive = sunlive || {};
module.exports.sunlive = sunlive;

sunlive.RoomProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

sunlive.RoomProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

sunlive.RoomProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


sunlive.CreateRoomReq = function() {
    this.iRoomId = 0;
    this._classname = "sunlive.CreateRoomReq";
};
sunlive.CreateRoomReq._classname = "sunlive.CreateRoomReq";

sunlive.CreateRoomReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.CreateRoomReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.CreateRoomReq._readFrom = function (is) {
    var tmp = new sunlive.CreateRoomReq();
    tmp.iRoomId = is.readInt32(1, false, 0);
    return tmp;
};
sunlive.CreateRoomReq.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iRoomId);
};
sunlive.CreateRoomReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.CreateRoomReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.CreateRoomReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRoomId = this.iRoomId;
    
    return tmp;
}
sunlive.CreateRoomReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRoomId") || (this.iRoomId = json.iRoomId);
}
sunlive.CreateRoomReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.CreateRoomReq.new = function () {
    return new sunlive.CreateRoomReq();
}
sunlive.CreateRoomReq.create = function (is) {
    return sunlive.CreateRoomReq._readFrom(is);
}
sunlive.ClientMsg = function() {
    this.lSessionId = 0;
    this.iRoomId = 0;
    this.sServant = "";
    this.bytes = new TarsStream.BinBuffer();
    this._classname = "sunlive.ClientMsg";
};
sunlive.ClientMsg._classname = "sunlive.ClientMsg";

sunlive.ClientMsg._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.ClientMsg._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.ClientMsg._readFrom = function (is) {
    var tmp = new sunlive.ClientMsg();
    tmp.lSessionId = is.readInt64(1, false, 0);
    tmp.iRoomId = is.readInt32(2, false, 0);
    tmp.sServant = is.readString(3, false, "");
    tmp.bytes = is.readBytes(4, false, TarsStream.BinBuffer);
    return tmp;
};
sunlive.ClientMsg.prototype._writeTo = function (os) {
    os.writeInt64(1, this.lSessionId);
    os.writeInt32(2, this.iRoomId);
    os.writeString(3, this.sServant);
    os.writeBytes(4, this.bytes);
};
sunlive.ClientMsg.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.ClientMsg.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.ClientMsg.prototype.toObject = function() { 
    var tmp = {};

    tmp.lSessionId = this.lSessionId;
    tmp.iRoomId = this.iRoomId;
    tmp.sServant = this.sServant;
    tmp.bytes = this.bytes.toObject();
    
    return tmp;
}
sunlive.ClientMsg.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("lSessionId") || (this.lSessionId = json.lSessionId);
    !json.hasOwnProperty("iRoomId") || (this.iRoomId = json.iRoomId);
    !json.hasOwnProperty("sServant") || (this.sServant = json.sServant);
    !json.hasOwnProperty("bytes") || (this.bytes.readFromObject(json.bytes));
}
sunlive.ClientMsg.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.ClientMsg.new = function () {
    return new sunlive.ClientMsg();
}
sunlive.ClientMsg.create = function (is) {
    return sunlive.ClientMsg._readFrom(is);
}
sunlive.RoomBase = function() {
    this.id = 0;
    this.begin_time = 0;
    this.end_time = 0;
    this.teacher = "";
    this.name = "";
    this.mode = 0;
    this.capacity = 0;
    this.ahead_time = 0;
    this.teacher_id = 0;
    this.live_type = 0;
    this.im_id = 0;
    this.token = "";
    this._classname = "sunlive.RoomBase";
};
sunlive.RoomBase._classname = "sunlive.RoomBase";

sunlive.RoomBase._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.RoomBase._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.RoomBase._readFrom = function (is) {
    var tmp = new sunlive.RoomBase();
    tmp.id = is.readInt32(1, false, 0);
    tmp.begin_time = is.readInt64(2, false, 0);
    tmp.end_time = is.readInt64(3, false, 0);
    tmp.teacher = is.readString(4, false, "");
    tmp.name = is.readString(5, false, "");
    tmp.mode = is.readInt32(6, false, 0);
    tmp.capacity = is.readInt32(7, false, 0);
    tmp.ahead_time = is.readInt32(8, false, 0);
    tmp.teacher_id = is.readInt32(9, false, 0);
    tmp.live_type = is.readInt32(10, false, 0);
    tmp.im_id = is.readInt32(11, false, 0);
    tmp.token = is.readString(12, false, "");
    return tmp;
};
sunlive.RoomBase.prototype._writeTo = function (os) {
    os.writeInt32(1, this.id);
    os.writeInt64(2, this.begin_time);
    os.writeInt64(3, this.end_time);
    os.writeString(4, this.teacher);
    os.writeString(5, this.name);
    os.writeInt32(6, this.mode);
    os.writeInt32(7, this.capacity);
    os.writeInt32(8, this.ahead_time);
    os.writeInt32(9, this.teacher_id);
    os.writeInt32(10, this.live_type);
    os.writeInt32(11, this.im_id);
    os.writeString(12, this.token);
};
sunlive.RoomBase.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.RoomBase.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.RoomBase.prototype.toObject = function() { 
    var tmp = {};

    tmp.id = this.id;
    tmp.begin_time = this.begin_time;
    tmp.end_time = this.end_time;
    tmp.teacher = this.teacher;
    tmp.name = this.name;
    tmp.mode = this.mode;
    tmp.capacity = this.capacity;
    tmp.ahead_time = this.ahead_time;
    tmp.teacher_id = this.teacher_id;
    tmp.live_type = this.live_type;
    tmp.im_id = this.im_id;
    tmp.token = this.token;
    
    return tmp;
}
sunlive.RoomBase.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("id") || (this.id = json.id);
    !json.hasOwnProperty("begin_time") || (this.begin_time = json.begin_time);
    !json.hasOwnProperty("end_time") || (this.end_time = json.end_time);
    !json.hasOwnProperty("teacher") || (this.teacher = json.teacher);
    !json.hasOwnProperty("name") || (this.name = json.name);
    !json.hasOwnProperty("mode") || (this.mode = json.mode);
    !json.hasOwnProperty("capacity") || (this.capacity = json.capacity);
    !json.hasOwnProperty("ahead_time") || (this.ahead_time = json.ahead_time);
    !json.hasOwnProperty("teacher_id") || (this.teacher_id = json.teacher_id);
    !json.hasOwnProperty("live_type") || (this.live_type = json.live_type);
    !json.hasOwnProperty("im_id") || (this.im_id = json.im_id);
    !json.hasOwnProperty("token") || (this.token = json.token);
}
sunlive.RoomBase.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.RoomBase.new = function () {
    return new sunlive.RoomBase();
}
sunlive.RoomBase.create = function (is) {
    return sunlive.RoomBase._readFrom(is);
}
sunlive.RoomUtil = function() {
    this.course_id = 0;
    this.page_id = 0;
    this.trace_id = 0;
    this.sequence = 0;
    this.live_begin_time = 0;
    this.live_end_time = 0;
    this.status = _TARS_MODULE_D_.sunlive.RoomStatus.READY;
    this.cdn_type = _TARS_MODULE_D_.sunlive.CdnType.CDN_TYPE_MIN;
    this.constraints = "";
    this.im_id = 0;
    this.user_count = 0;
    this.online_ts = 0;
    this.stream_stop_ts = 0;
    this.operation_ts = 0;
    this.push_url = "";
    this.url_type = _TARS_MODULE_D_.sunlive.UrlType.URL_NORMAL;
    this._classname = "sunlive.RoomUtil";
};
sunlive.RoomUtil._classname = "sunlive.RoomUtil";

sunlive.RoomUtil._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.RoomUtil._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.RoomUtil._readFrom = function (is) {
    var tmp = new sunlive.RoomUtil();
    tmp.course_id = is.readInt32(1, false, 0);
    tmp.page_id = is.readInt32(2, false, 0);
    tmp.trace_id = is.readInt32(3, false, 0);
    tmp.sequence = is.readInt64(4, false, 0);
    tmp.live_begin_time = is.readInt64(5, false, 0);
    tmp.live_end_time = is.readInt64(6, false, 0);
    tmp.status = is.readInt32(7, false, _TARS_MODULE_D_.sunlive.RoomStatus.READY);
    tmp.cdn_type = is.readInt32(8, false, _TARS_MODULE_D_.sunlive.CdnType.CDN_TYPE_MIN);
    tmp.constraints = is.readString(9, false, "");
    tmp.im_id = is.readInt32(10, false, 0);
    tmp.user_count = is.readInt32(11, false, 0);
    tmp.online_ts = is.readInt64(12, false, 0);
    tmp.stream_stop_ts = is.readInt64(13, false, 0);
    tmp.operation_ts = is.readInt64(14, false, 0);
    tmp.push_url = is.readString(15, false, "");
    tmp.url_type = is.readInt32(16, false, _TARS_MODULE_D_.sunlive.UrlType.URL_NORMAL);
    return tmp;
};
sunlive.RoomUtil.prototype._writeTo = function (os) {
    os.writeInt32(1, this.course_id);
    os.writeInt32(2, this.page_id);
    os.writeInt32(3, this.trace_id);
    os.writeInt64(4, this.sequence);
    os.writeInt64(5, this.live_begin_time);
    os.writeInt64(6, this.live_end_time);
    os.writeInt32(7, this.status);
    os.writeInt32(8, this.cdn_type);
    os.writeString(9, this.constraints);
    os.writeInt32(10, this.im_id);
    os.writeInt32(11, this.user_count);
    os.writeInt64(12, this.online_ts);
    os.writeInt64(13, this.stream_stop_ts);
    os.writeInt64(14, this.operation_ts);
    os.writeString(15, this.push_url);
    os.writeInt32(16, this.url_type);
};
sunlive.RoomUtil.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.RoomUtil.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.RoomUtil.prototype.toObject = function() { 
    var tmp = {};

    tmp.course_id = this.course_id;
    tmp.page_id = this.page_id;
    tmp.trace_id = this.trace_id;
    tmp.sequence = this.sequence;
    tmp.live_begin_time = this.live_begin_time;
    tmp.live_end_time = this.live_end_time;
    tmp.status = this.status;
    tmp.cdn_type = this.cdn_type;
    tmp.constraints = this.constraints;
    tmp.im_id = this.im_id;
    tmp.user_count = this.user_count;
    tmp.online_ts = this.online_ts;
    tmp.stream_stop_ts = this.stream_stop_ts;
    tmp.operation_ts = this.operation_ts;
    tmp.push_url = this.push_url;
    tmp.url_type = this.url_type;
    
    return tmp;
}
sunlive.RoomUtil.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("course_id") || (this.course_id = json.course_id);
    !json.hasOwnProperty("page_id") || (this.page_id = json.page_id);
    !json.hasOwnProperty("trace_id") || (this.trace_id = json.trace_id);
    !json.hasOwnProperty("sequence") || (this.sequence = json.sequence);
    !json.hasOwnProperty("live_begin_time") || (this.live_begin_time = json.live_begin_time);
    !json.hasOwnProperty("live_end_time") || (this.live_end_time = json.live_end_time);
    !json.hasOwnProperty("status") || (this.status = json.status);
    !json.hasOwnProperty("cdn_type") || (this.cdn_type = json.cdn_type);
    !json.hasOwnProperty("constraints") || (this.constraints = json.constraints);
    !json.hasOwnProperty("im_id") || (this.im_id = json.im_id);
    !json.hasOwnProperty("user_count") || (this.user_count = json.user_count);
    !json.hasOwnProperty("online_ts") || (this.online_ts = json.online_ts);
    !json.hasOwnProperty("stream_stop_ts") || (this.stream_stop_ts = json.stream_stop_ts);
    !json.hasOwnProperty("operation_ts") || (this.operation_ts = json.operation_ts);
    !json.hasOwnProperty("push_url") || (this.push_url = json.push_url);
    !json.hasOwnProperty("url_type") || (this.url_type = json.url_type);
}
sunlive.RoomUtil.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.RoomUtil.new = function () {
    return new sunlive.RoomUtil();
}
sunlive.RoomUtil.create = function (is) {
    return sunlive.RoomUtil._readFrom(is);
}
sunlive.UserBase = function() {
    this.id = 0;
    this.sex = 0;
    this.role = _TARS_MODULE_D_.sunlive.RoleType.RT_BEGIN;
    this.name = "";
    this.icon = "";
    this.rid = 0;
    this.cli_type = _TARS_MODULE_D_.sunlive.ClientType.UnKnown;
    this.gate = new _TARS_MODULE_B_.sunlive.GateInfo();
    this.login_time = 0;
    this.app_type = _TARS_MODULE_D_.sunlive.AppType.WEB_PUSH;
    this.auth_type = 0;
    this.user_agent = "";
    this.token = "";
    this._classname = "sunlive.UserBase";
};
sunlive.UserBase._classname = "sunlive.UserBase";

sunlive.UserBase._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.UserBase._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.UserBase._readFrom = function (is) {
    var tmp = new sunlive.UserBase();
    tmp.id = is.readInt32(1, false, 0);
    tmp.sex = is.readInt32(2, false, 0);
    tmp.role = is.readInt32(3, false, _TARS_MODULE_D_.sunlive.RoleType.RT_BEGIN);
    tmp.name = is.readString(4, false, "");
    tmp.icon = is.readString(5, false, "");
    tmp.rid = is.readInt32(6, false, 0);
    tmp.cli_type = is.readInt32(7, false, _TARS_MODULE_D_.sunlive.ClientType.UnKnown);
    tmp.gate = is.readStruct(8, false, _TARS_MODULE_B_.sunlive.GateInfo);
    tmp.login_time = is.readInt64(9, false, 0);
    tmp.app_type = is.readInt32(10, false, _TARS_MODULE_D_.sunlive.AppType.WEB_PUSH);
    tmp.auth_type = is.readInt32(11, false, 0);
    tmp.user_agent = is.readString(12, false, "");
    tmp.token = is.readString(13, false, "");
    return tmp;
};
sunlive.UserBase.prototype._writeTo = function (os) {
    os.writeInt32(1, this.id);
    os.writeInt32(2, this.sex);
    os.writeInt32(3, this.role);
    os.writeString(4, this.name);
    os.writeString(5, this.icon);
    os.writeInt32(6, this.rid);
    os.writeInt32(7, this.cli_type);
    os.writeStruct(8, this.gate);
    os.writeInt64(9, this.login_time);
    os.writeInt32(10, this.app_type);
    os.writeInt32(11, this.auth_type);
    os.writeString(12, this.user_agent);
    os.writeString(13, this.token);
};
sunlive.UserBase.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.UserBase.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.UserBase.prototype.toObject = function() { 
    var tmp = {};

    tmp.id = this.id;
    tmp.sex = this.sex;
    tmp.role = this.role;
    tmp.name = this.name;
    tmp.icon = this.icon;
    tmp.rid = this.rid;
    tmp.cli_type = this.cli_type;
    tmp.gate = this.gate.toObject();
    tmp.login_time = this.login_time;
    tmp.app_type = this.app_type;
    tmp.auth_type = this.auth_type;
    tmp.user_agent = this.user_agent;
    tmp.token = this.token;
    
    return tmp;
}
sunlive.UserBase.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("id") || (this.id = json.id);
    !json.hasOwnProperty("sex") || (this.sex = json.sex);
    !json.hasOwnProperty("role") || (this.role = json.role);
    !json.hasOwnProperty("name") || (this.name = json.name);
    !json.hasOwnProperty("icon") || (this.icon = json.icon);
    !json.hasOwnProperty("rid") || (this.rid = json.rid);
    !json.hasOwnProperty("cli_type") || (this.cli_type = json.cli_type);
    !json.hasOwnProperty("gate") || (this.gate.readFromObject(json.gate));
    !json.hasOwnProperty("login_time") || (this.login_time = json.login_time);
    !json.hasOwnProperty("app_type") || (this.app_type = json.app_type);
    !json.hasOwnProperty("auth_type") || (this.auth_type = json.auth_type);
    !json.hasOwnProperty("user_agent") || (this.user_agent = json.user_agent);
    !json.hasOwnProperty("token") || (this.token = json.token);
}
sunlive.UserBase.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.UserBase.new = function () {
    return new sunlive.UserBase();
}
sunlive.UserBase.create = function (is) {
    return sunlive.UserBase._readFrom(is);
}
sunlive.SessionField = function() {
    this.sid = 0;
    this.servant = "";
    this.token = "";
    this._classname = "sunlive.SessionField";
};
sunlive.SessionField._classname = "sunlive.SessionField";

sunlive.SessionField._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.SessionField._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.SessionField._readFrom = function (is) {
    var tmp = new sunlive.SessionField();
    tmp.sid = is.readInt64(1, false, 0);
    tmp.servant = is.readString(2, false, "");
    tmp.token = is.readString(3, false, "");
    return tmp;
};
sunlive.SessionField.prototype._writeTo = function (os) {
    os.writeInt64(1, this.sid);
    os.writeString(2, this.servant);
    os.writeString(3, this.token);
};
sunlive.SessionField.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.SessionField.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.SessionField.prototype.toObject = function() { 
    var tmp = {};

    tmp.sid = this.sid;
    tmp.servant = this.servant;
    tmp.token = this.token;
    
    return tmp;
}
sunlive.SessionField.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sid") || (this.sid = json.sid);
    !json.hasOwnProperty("servant") || (this.servant = json.servant);
    !json.hasOwnProperty("token") || (this.token = json.token);
}
sunlive.SessionField.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.SessionField.new = function () {
    return new sunlive.SessionField();
}
sunlive.SessionField.create = function (is) {
    return sunlive.SessionField._readFrom(is);
}
sunlive.UserField = function() {
    this.rid = 0;
    this.cli_type = _TARS_MODULE_D_.sunlive.ClientType.UnKnown;
    this._classname = "sunlive.UserField";
};
sunlive.UserField._classname = "sunlive.UserField";

sunlive.UserField._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.UserField._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.UserField._readFrom = function (is) {
    var tmp = new sunlive.UserField();
    tmp.rid = is.readInt32(1, false, 0);
    tmp.cli_type = is.readInt32(2, false, _TARS_MODULE_D_.sunlive.ClientType.UnKnown);
    return tmp;
};
sunlive.UserField.prototype._writeTo = function (os) {
    os.writeInt32(1, this.rid);
    os.writeInt32(2, this.cli_type);
};
sunlive.UserField.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.UserField.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.UserField.prototype.toObject = function() { 
    var tmp = {};

    tmp.rid = this.rid;
    tmp.cli_type = this.cli_type;
    
    return tmp;
}
sunlive.UserField.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("rid") || (this.rid = json.rid);
    !json.hasOwnProperty("cli_type") || (this.cli_type = json.cli_type);
}
sunlive.UserField.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.UserField.new = function () {
    return new sunlive.UserField();
}
sunlive.UserField.create = function (is) {
    return sunlive.UserField._readFrom(is);
}
sunlive.LeaveNotify = function() {
    this.iRoomId = 0;
    this.gate = new _TARS_MODULE_B_.sunlive.GateInfo();
    this._classname = "sunlive.LeaveNotify";
};
sunlive.LeaveNotify._classname = "sunlive.LeaveNotify";

sunlive.LeaveNotify._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.LeaveNotify._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.LeaveNotify._readFrom = function (is) {
    var tmp = new sunlive.LeaveNotify();
    tmp.iRoomId = is.readInt32(1, false, 0);
    tmp.gate = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.GateInfo);
    return tmp;
};
sunlive.LeaveNotify.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iRoomId);
    os.writeStruct(2, this.gate);
};
sunlive.LeaveNotify.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.LeaveNotify.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.LeaveNotify.prototype.toObject = function() { 
    var tmp = {};

    tmp.iRoomId = this.iRoomId;
    tmp.gate = this.gate.toObject();
    
    return tmp;
}
sunlive.LeaveNotify.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iRoomId") || (this.iRoomId = json.iRoomId);
    !json.hasOwnProperty("gate") || (this.gate.readFromObject(json.gate));
}
sunlive.LeaveNotify.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.LeaveNotify.new = function () {
    return new sunlive.LeaveNotify();
}
sunlive.LeaveNotify.create = function (is) {
    return sunlive.LeaveNotify._readFrom(is);
}

sunlive.RoomProxy.prototype.client2Room = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('client2Room', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.createRoom = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('createRoom', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.deleteRoom = function (iRoomId) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeInt32(1, iRoomId);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('deleteRoom', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.existRoom = function (iRoomId) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeInt32(1, iRoomId);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('existRoom', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.login = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('login', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.server2Room = function (request) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, request);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('server2Room', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.updateRoom = function (iRoomId) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeInt32(1, iRoomId);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('updateRoom', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

sunlive.RoomProxy.prototype.userLeaveNotify = function (leave) {
    var _encode = function () { 
        var os = new TarsStream.OutputStream();
        os.writeStruct(1, leave);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TarsStream.InputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TarsStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.tars_invoke('userLeaveNotify', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



