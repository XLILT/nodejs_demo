// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0-83.
// **********************************************************************

"use strict;"

var assert     = require('assert');
var TarsStream = require('@tars/stream');


var sunlive = sunlive || {};
module.exports.sunlive = sunlive;

sunlive.BodyFormat = {
    BF_RAW : 1,
    BF_FORM : 2
};
sunlive.BodyFormat._write = function(os, tag, val) { return os.writeInt32(tag, val); }
sunlive.BodyFormat._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

sunlive.FileMeta = function() {
    this.iPageId = 0;
    this.sFileHash = "";
    this.iWidth = 0;
    this.iHeight = 0;
    this.iQuestionId = 0;
    this._classname = "sunlive.FileMeta";
};
sunlive.FileMeta._classname = "sunlive.FileMeta";

sunlive.FileMeta._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.FileMeta._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.FileMeta._readFrom = function (is) {
    var tmp = new sunlive.FileMeta();
    tmp.iPageId = is.readInt32(1, false, 0);
    tmp.sFileHash = is.readString(2, false, "");
    tmp.iWidth = is.readInt32(3, false, 0);
    tmp.iHeight = is.readInt32(4, false, 0);
    tmp.iQuestionId = is.readInt32(5, false, 0);
    return tmp;
};
sunlive.FileMeta.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iPageId);
    os.writeString(2, this.sFileHash);
    os.writeInt32(3, this.iWidth);
    os.writeInt32(4, this.iHeight);
    os.writeInt32(5, this.iQuestionId);
};
sunlive.FileMeta.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.FileMeta.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.FileMeta.prototype.toObject = function() { 
    var tmp = {};

    tmp.iPageId = this.iPageId;
    tmp.sFileHash = this.sFileHash;
    tmp.iWidth = this.iWidth;
    tmp.iHeight = this.iHeight;
    tmp.iQuestionId = this.iQuestionId;
    
    return tmp;
}
sunlive.FileMeta.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iPageId") || (this.iPageId = json.iPageId);
    !json.hasOwnProperty("sFileHash") || (this.sFileHash = json.sFileHash);
    !json.hasOwnProperty("iWidth") || (this.iWidth = json.iWidth);
    !json.hasOwnProperty("iHeight") || (this.iHeight = json.iHeight);
    !json.hasOwnProperty("iQuestionId") || (this.iQuestionId = json.iQuestionId);
}
sunlive.FileMeta.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.FileMeta.new = function () {
    return new sunlive.FileMeta();
}
sunlive.FileMeta.create = function (is) {
    return sunlive.FileMeta._readFrom(is);
}
sunlive.TokenRequest = function() {
    this.iDocId = 0;
    this.lRoomId = 0;
    this.iPageCount = 0;
    this.sFileName = "";
    this.vFiles = new TarsStream.List(sunlive.FileMeta);
    this.sImgSuffix = "png";
    this.iPaperId = 0;
    this.lExpireSeconds = 1800;
    this.lDownloadExpireSeconds = 2592000;
    this._classname = "sunlive.TokenRequest";
};
sunlive.TokenRequest._classname = "sunlive.TokenRequest";

sunlive.TokenRequest._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.TokenRequest._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.TokenRequest._readFrom = function (is) {
    var tmp = new sunlive.TokenRequest();
    tmp.iDocId = is.readInt32(1, false, 0);
    tmp.lRoomId = is.readInt64(2, false, 0);
    tmp.iPageCount = is.readInt32(3, false, 0);
    tmp.sFileName = is.readString(4, false, "");
    tmp.vFiles = is.readList(5, false, TarsStream.List(sunlive.FileMeta));
    tmp.sImgSuffix = is.readString(6, false, "png");
    tmp.iPaperId = is.readUInt32(7, false, 0);
    tmp.lExpireSeconds = is.readInt64(101, false, 1800);
    tmp.lDownloadExpireSeconds = is.readInt64(102, false, 2592000);
    return tmp;
};
sunlive.TokenRequest.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iDocId);
    os.writeInt64(2, this.lRoomId);
    os.writeInt32(3, this.iPageCount);
    os.writeString(4, this.sFileName);
    os.writeList(5, this.vFiles);
    os.writeString(6, this.sImgSuffix);
    os.writeUInt32(7, this.iPaperId);
    os.writeInt64(101, this.lExpireSeconds);
    os.writeInt64(102, this.lDownloadExpireSeconds);
};
sunlive.TokenRequest.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.TokenRequest.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.TokenRequest.prototype.toObject = function() { 
    var tmp = {};

    tmp.iDocId = this.iDocId;
    tmp.lRoomId = this.lRoomId;
    tmp.iPageCount = this.iPageCount;
    tmp.sFileName = this.sFileName;
    tmp.vFiles = this.vFiles.toObject();
    tmp.sImgSuffix = this.sImgSuffix;
    tmp.iPaperId = this.iPaperId;
    tmp.lExpireSeconds = this.lExpireSeconds;
    tmp.lDownloadExpireSeconds = this.lDownloadExpireSeconds;
    
    return tmp;
}
sunlive.TokenRequest.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iDocId") || (this.iDocId = json.iDocId);
    !json.hasOwnProperty("lRoomId") || (this.lRoomId = json.lRoomId);
    !json.hasOwnProperty("iPageCount") || (this.iPageCount = json.iPageCount);
    !json.hasOwnProperty("sFileName") || (this.sFileName = json.sFileName);
    !json.hasOwnProperty("vFiles") || (this.vFiles.readFromObject(json.vFiles));
    !json.hasOwnProperty("sImgSuffix") || (this.sImgSuffix = json.sImgSuffix);
    !json.hasOwnProperty("iPaperId") || (this.iPaperId = json.iPaperId);
    !json.hasOwnProperty("lExpireSeconds") || (this.lExpireSeconds = json.lExpireSeconds);
    !json.hasOwnProperty("lDownloadExpireSeconds") || (this.lDownloadExpireSeconds = json.lDownloadExpireSeconds);
}
sunlive.TokenRequest.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.TokenRequest.new = function () {
    return new sunlive.TokenRequest();
}
sunlive.TokenRequest.create = function (is) {
    return sunlive.TokenRequest._readFrom(is);
}
sunlive.FileToken = function() {
    this.iPageId = 0;
    this.bNeedUpload = true;
    this.sUploadURL = "";
    this.sMethod = "PUT";
    this.mHeader = new TarsStream.Map(TarsStream.String, TarsStream.String);
    this.eBodyFormat = sunlive.BodyFormat.BF_RAW;
    this._classname = "sunlive.FileToken";
};
sunlive.FileToken._classname = "sunlive.FileToken";

sunlive.FileToken._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.FileToken._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.FileToken._readFrom = function (is) {
    var tmp = new sunlive.FileToken();
    tmp.iPageId = is.readInt32(1, false, 0);
    tmp.bNeedUpload = is.readBoolean(2, false, true);
    tmp.sUploadURL = is.readString(3, false, "");
    tmp.sMethod = is.readString(4, false, "PUT");
    tmp.mHeader = is.readMap(5, false, TarsStream.Map(TarsStream.String, TarsStream.String));
    tmp.eBodyFormat = is.readInt32(6, false, sunlive.BodyFormat.BF_RAW);
    return tmp;
};
sunlive.FileToken.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iPageId);
    os.writeBoolean(2, this.bNeedUpload);
    os.writeString(3, this.sUploadURL);
    os.writeString(4, this.sMethod);
    os.writeMap(5, this.mHeader);
    os.writeInt32(6, this.eBodyFormat);
};
sunlive.FileToken.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.FileToken.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.FileToken.prototype.toObject = function() { 
    var tmp = {};

    tmp.iPageId = this.iPageId;
    tmp.bNeedUpload = this.bNeedUpload;
    tmp.sUploadURL = this.sUploadURL;
    tmp.sMethod = this.sMethod;
    tmp.mHeader = this.mHeader.toObject();
    tmp.eBodyFormat = this.eBodyFormat;
    
    return tmp;
}
sunlive.FileToken.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iPageId") || (this.iPageId = json.iPageId);
    !json.hasOwnProperty("bNeedUpload") || (this.bNeedUpload = json.bNeedUpload);
    !json.hasOwnProperty("sUploadURL") || (this.sUploadURL = json.sUploadURL);
    !json.hasOwnProperty("sMethod") || (this.sMethod = json.sMethod);
    !json.hasOwnProperty("mHeader") || (this.mHeader.readFromObject(json.mHeader));
    !json.hasOwnProperty("eBodyFormat") || (this.eBodyFormat = json.eBodyFormat);
}
sunlive.FileToken.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.FileToken.new = function () {
    return new sunlive.FileToken();
}
sunlive.FileToken.create = function (is) {
    return sunlive.FileToken._readFrom(is);
}
sunlive.TokenResponse = function() {
    this.iDocId = 0;
    this.vTokens = new TarsStream.List(sunlive.FileToken);
    this.iCode = 0;
    this._classname = "sunlive.TokenResponse";
};
sunlive.TokenResponse._classname = "sunlive.TokenResponse";

sunlive.TokenResponse._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.TokenResponse._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.TokenResponse._readFrom = function (is) {
    var tmp = new sunlive.TokenResponse();
    tmp.iDocId = is.readInt32(1, false, 0);
    tmp.vTokens = is.readList(2, false, TarsStream.List(sunlive.FileToken));
    tmp.iCode = is.readInt32(3, false, 0);
    return tmp;
};
sunlive.TokenResponse.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iDocId);
    os.writeList(2, this.vTokens);
    os.writeInt32(3, this.iCode);
};
sunlive.TokenResponse.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.TokenResponse.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.TokenResponse.prototype.toObject = function() { 
    var tmp = {};

    tmp.iDocId = this.iDocId;
    tmp.vTokens = this.vTokens.toObject();
    tmp.iCode = this.iCode;
    
    return tmp;
}
sunlive.TokenResponse.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iDocId") || (this.iDocId = json.iDocId);
    !json.hasOwnProperty("vTokens") || (this.vTokens.readFromObject(json.vTokens));
    !json.hasOwnProperty("iCode") || (this.iCode = json.iCode);
}
sunlive.TokenResponse.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.TokenResponse.new = function () {
    return new sunlive.TokenResponse();
}
sunlive.TokenResponse.create = function (is) {
    return sunlive.TokenResponse._readFrom(is);
}


