// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0-83.
// **********************************************************************

"use strict;"

var assert     = require('assert');
var TarsStream = require('@tars/stream');
var _TARS_MODULE_A_ = require('./RoomBaseTars.js');
var _TARS_MODULE_B_ = require('./RoomClientTars.js');


var sunlive = sunlive || {};
module.exports.sunlive = sunlive;

sunlive.VIDEO_INTERVAL = 10000;

sunlive.VideoLoginRes = function() {
    this.iCode = 0;
    this.roomInfo = new _TARS_MODULE_B_.sunlive.RoomInfo();
    this.sIcon = "";
    this.iSex = 0;
    this.sUserName = "";
    this.videoPlayUrls = new TarsStream.List(_TARS_MODULE_A_.sunlive.PlaybackUrlInfo);
    this.iUserId = 0;
    this.err = new _TARS_MODULE_B_.sunlive.Error();
    this._classname = "sunlive.VideoLoginRes";
};
sunlive.VideoLoginRes._classname = "sunlive.VideoLoginRes";

sunlive.VideoLoginRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.VideoLoginRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.VideoLoginRes._readFrom = function (is) {
    var tmp = new sunlive.VideoLoginRes();
    tmp.iCode = is.readInt32(1, false, 0);
    tmp.roomInfo = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.RoomInfo);
    tmp.sIcon = is.readString(3, false, "");
    tmp.iSex = is.readInt32(4, false, 0);
    tmp.sUserName = is.readString(5, false, "");
    tmp.videoPlayUrls = is.readList(6, false, TarsStream.List(_TARS_MODULE_A_.sunlive.PlaybackUrlInfo));
    tmp.iUserId = is.readInt32(7, false, 0);
    tmp.err = is.readStruct(8, false, _TARS_MODULE_B_.sunlive.Error);
    return tmp;
};
sunlive.VideoLoginRes.prototype._writeTo = function (os) {
    os.writeInt32(1, this.iCode);
    os.writeStruct(2, this.roomInfo);
    os.writeString(3, this.sIcon);
    os.writeInt32(4, this.iSex);
    os.writeString(5, this.sUserName);
    os.writeList(6, this.videoPlayUrls);
    os.writeInt32(7, this.iUserId);
    os.writeStruct(8, this.err);
};
sunlive.VideoLoginRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.VideoLoginRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.VideoLoginRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.iCode = this.iCode;
    tmp.roomInfo = this.roomInfo.toObject();
    tmp.sIcon = this.sIcon;
    tmp.iSex = this.iSex;
    tmp.sUserName = this.sUserName;
    tmp.videoPlayUrls = this.videoPlayUrls.toObject();
    tmp.iUserId = this.iUserId;
    tmp.err = this.err.toObject();
    
    return tmp;
}
sunlive.VideoLoginRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("iCode") || (this.iCode = json.iCode);
    !json.hasOwnProperty("roomInfo") || (this.roomInfo.readFromObject(json.roomInfo));
    !json.hasOwnProperty("sIcon") || (this.sIcon = json.sIcon);
    !json.hasOwnProperty("iSex") || (this.iSex = json.iSex);
    !json.hasOwnProperty("sUserName") || (this.sUserName = json.sUserName);
    !json.hasOwnProperty("videoPlayUrls") || (this.videoPlayUrls.readFromObject(json.videoPlayUrls));
    !json.hasOwnProperty("iUserId") || (this.iUserId = json.iUserId);
    !json.hasOwnProperty("err") || (this.err.readFromObject(json.err));
}
sunlive.VideoLoginRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.VideoLoginRes.new = function () {
    return new sunlive.VideoLoginRes();
}
sunlive.VideoLoginRes.create = function (is) {
    return sunlive.VideoLoginRes._readFrom(is);
}
sunlive.VideoToken = function() {
    this.roomId = 0;
    this.token = "";
    this.pausePlay = 0;
    this._classname = "sunlive.VideoToken";
};
sunlive.VideoToken._classname = "sunlive.VideoToken";

sunlive.VideoToken._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.VideoToken._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.VideoToken._readFrom = function (is) {
    var tmp = new sunlive.VideoToken();
    tmp.roomId = is.readInt64(1, false, 0);
    tmp.token = is.readString(2, false, "");
    tmp.pausePlay = is.readInt32(3, false, 0);
    return tmp;
};
sunlive.VideoToken.prototype._writeTo = function (os) {
    os.writeInt64(1, this.roomId);
    os.writeString(2, this.token);
    os.writeInt32(3, this.pausePlay);
};
sunlive.VideoToken.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.VideoToken.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.VideoToken.prototype.toObject = function() { 
    var tmp = {};

    tmp.roomId = this.roomId;
    tmp.token = this.token;
    tmp.pausePlay = this.pausePlay;
    
    return tmp;
}
sunlive.VideoToken.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("roomId") || (this.roomId = json.roomId);
    !json.hasOwnProperty("token") || (this.token = json.token);
    !json.hasOwnProperty("pausePlay") || (this.pausePlay = json.pausePlay);
}
sunlive.VideoToken.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.VideoToken.new = function () {
    return new sunlive.VideoToken();
}
sunlive.VideoToken.create = function (is) {
    return sunlive.VideoToken._readFrom(is);
}
sunlive.GetPage = function() {
    this.lSequence = 0;
    this.bIgnore = false;
    this.token = new sunlive.VideoToken();
    this._classname = "sunlive.GetPage";
};
sunlive.GetPage._classname = "sunlive.GetPage";

sunlive.GetPage._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.GetPage._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.GetPage._readFrom = function (is) {
    var tmp = new sunlive.GetPage();
    tmp.lSequence = is.readInt64(1, false, 0);
    tmp.bIgnore = is.readBoolean(2, false, false);
    tmp.token = is.readStruct(3, false, sunlive.VideoToken);
    return tmp;
};
sunlive.GetPage.prototype._writeTo = function (os) {
    os.writeInt64(1, this.lSequence);
    os.writeBoolean(2, this.bIgnore);
    os.writeStruct(3, this.token);
};
sunlive.GetPage.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.GetPage.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.GetPage.prototype.toObject = function() { 
    var tmp = {};

    tmp.lSequence = this.lSequence;
    tmp.bIgnore = this.bIgnore;
    tmp.token = this.token.toObject();
    
    return tmp;
}
sunlive.GetPage.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("lSequence") || (this.lSequence = json.lSequence);
    !json.hasOwnProperty("bIgnore") || (this.bIgnore = json.bIgnore);
    !json.hasOwnProperty("token") || (this.token.readFromObject(json.token));
}
sunlive.GetPage.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.GetPage.new = function () {
    return new sunlive.GetPage();
}
sunlive.GetPage.create = function (is) {
    return sunlive.GetPage._readFrom(is);
}
sunlive.GetIncreamentMsg = function() {
    this.lSequence = 0;
    this.iInterval = 0;
    this.token = new sunlive.VideoToken();
    this._classname = "sunlive.GetIncreamentMsg";
};
sunlive.GetIncreamentMsg._classname = "sunlive.GetIncreamentMsg";

sunlive.GetIncreamentMsg._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.GetIncreamentMsg._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.GetIncreamentMsg._readFrom = function (is) {
    var tmp = new sunlive.GetIncreamentMsg();
    tmp.lSequence = is.readInt64(1, false, 0);
    tmp.iInterval = is.readInt32(2, false, 0);
    tmp.token = is.readStruct(3, false, sunlive.VideoToken);
    return tmp;
};
sunlive.GetIncreamentMsg.prototype._writeTo = function (os) {
    os.writeInt64(1, this.lSequence);
    os.writeInt32(2, this.iInterval);
    os.writeStruct(3, this.token);
};
sunlive.GetIncreamentMsg.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.GetIncreamentMsg.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.GetIncreamentMsg.prototype.toObject = function() { 
    var tmp = {};

    tmp.lSequence = this.lSequence;
    tmp.iInterval = this.iInterval;
    tmp.token = this.token.toObject();
    
    return tmp;
}
sunlive.GetIncreamentMsg.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("lSequence") || (this.lSequence = json.lSequence);
    !json.hasOwnProperty("iInterval") || (this.iInterval = json.iInterval);
    !json.hasOwnProperty("token") || (this.token.readFromObject(json.token));
}
sunlive.GetIncreamentMsg.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.GetIncreamentMsg.new = function () {
    return new sunlive.GetIncreamentMsg();
}
sunlive.GetIncreamentMsg.create = function (is) {
    return sunlive.GetIncreamentMsg._readFrom(is);
}
sunlive.VideoBatchRes = function() {
    this.sequenceMap = new TarsStream.Map(TarsStream.Int64, TarsStream.List(_TARS_MODULE_B_.sunlive.ClientMsgBody));
    this.err = new _TARS_MODULE_B_.sunlive.Error();
    this._classname = "sunlive.VideoBatchRes";
};
sunlive.VideoBatchRes._classname = "sunlive.VideoBatchRes";

sunlive.VideoBatchRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.VideoBatchRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.VideoBatchRes._readFrom = function (is) {
    var tmp = new sunlive.VideoBatchRes();
    tmp.sequenceMap = is.readMap(1, false, TarsStream.Map(TarsStream.Int64, TarsStream.List(_TARS_MODULE_B_.sunlive.ClientMsgBody)));
    tmp.err = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.Error);
    return tmp;
};
sunlive.VideoBatchRes.prototype._writeTo = function (os) {
    os.writeMap(1, this.sequenceMap);
    os.writeStruct(2, this.err);
};
sunlive.VideoBatchRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.VideoBatchRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.VideoBatchRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.sequenceMap = this.sequenceMap.toObject();
    tmp.err = this.err.toObject();
    
    return tmp;
}
sunlive.VideoBatchRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sequenceMap") || (this.sequenceMap.readFromObject(json.sequenceMap));
    !json.hasOwnProperty("err") || (this.err.readFromObject(json.err));
}
sunlive.VideoBatchRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.VideoBatchRes.new = function () {
    return new sunlive.VideoBatchRes();
}
sunlive.VideoBatchRes.create = function (is) {
    return sunlive.VideoBatchRes._readFrom(is);
}
sunlive.HeartBeat2 = function() {
    this.token = new sunlive.VideoToken();
    this.heartbeat = new _TARS_MODULE_B_.sunlive.HeartBeat();
    this._classname = "sunlive.HeartBeat2";
};
sunlive.HeartBeat2._classname = "sunlive.HeartBeat2";

sunlive.HeartBeat2._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.HeartBeat2._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.HeartBeat2._readFrom = function (is) {
    var tmp = new sunlive.HeartBeat2();
    tmp.token = is.readStruct(1, false, sunlive.VideoToken);
    tmp.heartbeat = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.HeartBeat);
    return tmp;
};
sunlive.HeartBeat2.prototype._writeTo = function (os) {
    os.writeStruct(1, this.token);
    os.writeStruct(2, this.heartbeat);
};
sunlive.HeartBeat2.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.HeartBeat2.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.HeartBeat2.prototype.toObject = function() { 
    var tmp = {};

    tmp.token = this.token.toObject();
    tmp.heartbeat = this.heartbeat.toObject();
    
    return tmp;
}
sunlive.HeartBeat2.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("token") || (this.token.readFromObject(json.token));
    !json.hasOwnProperty("heartbeat") || (this.heartbeat.readFromObject(json.heartbeat));
}
sunlive.HeartBeat2.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.HeartBeat2.new = function () {
    return new sunlive.HeartBeat2();
}
sunlive.HeartBeat2.create = function (is) {
    return sunlive.HeartBeat2._readFrom(is);
}
sunlive.VideoPage = function() {
    this.page = new _TARS_MODULE_B_.sunlive.Page();
    this.err = new _TARS_MODULE_B_.sunlive.Error();
    this._classname = "sunlive.VideoPage";
};
sunlive.VideoPage._classname = "sunlive.VideoPage";

sunlive.VideoPage._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.VideoPage._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.VideoPage._readFrom = function (is) {
    var tmp = new sunlive.VideoPage();
    tmp.page = is.readStruct(1, false, _TARS_MODULE_B_.sunlive.Page);
    tmp.err = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.Error);
    return tmp;
};
sunlive.VideoPage.prototype._writeTo = function (os) {
    os.writeStruct(1, this.page);
    os.writeStruct(2, this.err);
};
sunlive.VideoPage.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.VideoPage.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.VideoPage.prototype.toObject = function() { 
    var tmp = {};

    tmp.page = this.page.toObject();
    tmp.err = this.err.toObject();
    
    return tmp;
}
sunlive.VideoPage.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("page") || (this.page.readFromObject(json.page));
    !json.hasOwnProperty("err") || (this.err.readFromObject(json.err));
}
sunlive.VideoPage.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.VideoPage.new = function () {
    return new sunlive.VideoPage();
}
sunlive.VideoPage.create = function (is) {
    return sunlive.VideoPage._readFrom(is);
}
sunlive.VideoHeartBeat = function() {
    this.heartbeat = new _TARS_MODULE_B_.sunlive.HeartBeat();
    this.err = new _TARS_MODULE_B_.sunlive.Error();
    this._classname = "sunlive.VideoHeartBeat";
};
sunlive.VideoHeartBeat._classname = "sunlive.VideoHeartBeat";

sunlive.VideoHeartBeat._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.VideoHeartBeat._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.VideoHeartBeat._readFrom = function (is) {
    var tmp = new sunlive.VideoHeartBeat();
    tmp.heartbeat = is.readStruct(1, false, _TARS_MODULE_B_.sunlive.HeartBeat);
    tmp.err = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.Error);
    return tmp;
};
sunlive.VideoHeartBeat.prototype._writeTo = function (os) {
    os.writeStruct(1, this.heartbeat);
    os.writeStruct(2, this.err);
};
sunlive.VideoHeartBeat.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.VideoHeartBeat.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.VideoHeartBeat.prototype.toObject = function() { 
    var tmp = {};

    tmp.heartbeat = this.heartbeat.toObject();
    tmp.err = this.err.toObject();
    
    return tmp;
}
sunlive.VideoHeartBeat.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("heartbeat") || (this.heartbeat.readFromObject(json.heartbeat));
    !json.hasOwnProperty("err") || (this.err.readFromObject(json.err));
}
sunlive.VideoHeartBeat.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.VideoHeartBeat.new = function () {
    return new sunlive.VideoHeartBeat();
}
sunlive.VideoHeartBeat.create = function (is) {
    return sunlive.VideoHeartBeat._readFrom(is);
}
sunlive.FullMsgRes = function() {
    this.err = new _TARS_MODULE_B_.sunlive.Error();
    this.roomInfo = new _TARS_MODULE_B_.sunlive.RoomInfo();
    this.videoPlayUrls = new TarsStream.List(_TARS_MODULE_A_.sunlive.PlaybackUrlInfo);
    this.sequenceMap = new TarsStream.Map(TarsStream.Int64, TarsStream.List(_TARS_MODULE_B_.sunlive.ClientMsgBody));
    this.Pages = new TarsStream.Map(TarsStream.Int64, _TARS_MODULE_B_.sunlive.Page);
    this.coursewares = new TarsStream.Map(TarsStream.Int32, _TARS_MODULE_B_.sunlive.Courseware);
    this._classname = "sunlive.FullMsgRes";
};
sunlive.FullMsgRes._classname = "sunlive.FullMsgRes";

sunlive.FullMsgRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.FullMsgRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.FullMsgRes._readFrom = function (is) {
    var tmp = new sunlive.FullMsgRes();
    tmp.err = is.readStruct(1, false, _TARS_MODULE_B_.sunlive.Error);
    tmp.roomInfo = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.RoomInfo);
    tmp.videoPlayUrls = is.readList(3, false, TarsStream.List(_TARS_MODULE_A_.sunlive.PlaybackUrlInfo));
    tmp.sequenceMap = is.readMap(4, false, TarsStream.Map(TarsStream.Int64, TarsStream.List(_TARS_MODULE_B_.sunlive.ClientMsgBody)));
    tmp.Pages = is.readMap(5, false, TarsStream.Map(TarsStream.Int64, _TARS_MODULE_B_.sunlive.Page));
    tmp.coursewares = is.readMap(6, false, TarsStream.Map(TarsStream.Int32, _TARS_MODULE_B_.sunlive.Courseware));
    return tmp;
};
sunlive.FullMsgRes.prototype._writeTo = function (os) {
    os.writeStruct(1, this.err);
    os.writeStruct(2, this.roomInfo);
    os.writeList(3, this.videoPlayUrls);
    os.writeMap(4, this.sequenceMap);
    os.writeMap(5, this.Pages);
    os.writeMap(6, this.coursewares);
};
sunlive.FullMsgRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.FullMsgRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.FullMsgRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.err = this.err.toObject();
    tmp.roomInfo = this.roomInfo.toObject();
    tmp.videoPlayUrls = this.videoPlayUrls.toObject();
    tmp.sequenceMap = this.sequenceMap.toObject();
    tmp.Pages = this.Pages.toObject();
    tmp.coursewares = this.coursewares.toObject();
    
    return tmp;
}
sunlive.FullMsgRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("err") || (this.err.readFromObject(json.err));
    !json.hasOwnProperty("roomInfo") || (this.roomInfo.readFromObject(json.roomInfo));
    !json.hasOwnProperty("videoPlayUrls") || (this.videoPlayUrls.readFromObject(json.videoPlayUrls));
    !json.hasOwnProperty("sequenceMap") || (this.sequenceMap.readFromObject(json.sequenceMap));
    !json.hasOwnProperty("Pages") || (this.Pages.readFromObject(json.Pages));
    !json.hasOwnProperty("coursewares") || (this.coursewares.readFromObject(json.coursewares));
}
sunlive.FullMsgRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.FullMsgRes.new = function () {
    return new sunlive.FullMsgRes();
}
sunlive.FullMsgRes.create = function (is) {
    return sunlive.FullMsgRes._readFrom(is);
}
sunlive.GetMediaRes = function() {
    this.err = new _TARS_MODULE_B_.sunlive.Error();
    this.roomInfo = new _TARS_MODULE_B_.sunlive.RoomInfo();
    this.mediaPlayUrls = new TarsStream.List(_TARS_MODULE_A_.sunlive.PlaybackUrlInfo);
    this._classname = "sunlive.GetMediaRes";
};
sunlive.GetMediaRes._classname = "sunlive.GetMediaRes";

sunlive.GetMediaRes._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.GetMediaRes._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.GetMediaRes._readFrom = function (is) {
    var tmp = new sunlive.GetMediaRes();
    tmp.err = is.readStruct(1, false, _TARS_MODULE_B_.sunlive.Error);
    tmp.roomInfo = is.readStruct(2, false, _TARS_MODULE_B_.sunlive.RoomInfo);
    tmp.mediaPlayUrls = is.readList(3, false, TarsStream.List(_TARS_MODULE_A_.sunlive.PlaybackUrlInfo));
    return tmp;
};
sunlive.GetMediaRes.prototype._writeTo = function (os) {
    os.writeStruct(1, this.err);
    os.writeStruct(2, this.roomInfo);
    os.writeList(3, this.mediaPlayUrls);
};
sunlive.GetMediaRes.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.GetMediaRes.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.GetMediaRes.prototype.toObject = function() { 
    var tmp = {};

    tmp.err = this.err.toObject();
    tmp.roomInfo = this.roomInfo.toObject();
    tmp.mediaPlayUrls = this.mediaPlayUrls.toObject();
    
    return tmp;
}
sunlive.GetMediaRes.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("err") || (this.err.readFromObject(json.err));
    !json.hasOwnProperty("roomInfo") || (this.roomInfo.readFromObject(json.roomInfo));
    !json.hasOwnProperty("mediaPlayUrls") || (this.mediaPlayUrls.readFromObject(json.mediaPlayUrls));
}
sunlive.GetMediaRes.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.GetMediaRes.new = function () {
    return new sunlive.GetMediaRes();
}
sunlive.GetMediaRes.create = function (is) {
    return sunlive.GetMediaRes._readFrom(is);
}
sunlive.GetMediaLoginReq = function() {
    this.sToken = "";
    this.mediaType = 0;
    this._classname = "sunlive.GetMediaLoginReq";
};
sunlive.GetMediaLoginReq._classname = "sunlive.GetMediaLoginReq";

sunlive.GetMediaLoginReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
sunlive.GetMediaLoginReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
sunlive.GetMediaLoginReq._readFrom = function (is) {
    var tmp = new sunlive.GetMediaLoginReq();
    tmp.sToken = is.readString(1, false, "");
    tmp.mediaType = is.readInt64(2, false, 0);
    return tmp;
};
sunlive.GetMediaLoginReq.prototype._writeTo = function (os) {
    os.writeString(1, this.sToken);
    os.writeInt64(2, this.mediaType);
};
sunlive.GetMediaLoginReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
sunlive.GetMediaLoginReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
sunlive.GetMediaLoginReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.sToken = this.sToken;
    tmp.mediaType = this.mediaType;
    
    return tmp;
}
sunlive.GetMediaLoginReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sToken") || (this.sToken = json.sToken);
    !json.hasOwnProperty("mediaType") || (this.mediaType = json.mediaType);
}
sunlive.GetMediaLoginReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.OutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
sunlive.GetMediaLoginReq.new = function () {
    return new sunlive.GetMediaLoginReq();
}
sunlive.GetMediaLoginReq.create = function (is) {
    return sunlive.GetMediaLoginReq._readFrom(is);
}


